{"version":3,"sources":["logo.svg","Draggable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","App","state","draggableVisibility","targetKey","style","display","this","dropData","type","src","width","id","onHit","e","alert","window","location","href","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,8ICGGC,Y,MC8C/BC,E,2MA1CbC,MAAQ,CACNC,oBAAqB,S,wEAIrB,OACE,oCACA,uFACE,kBAAC,oBAAD,CACEC,UAAU,MACVC,MAAO,CAACC,QAASC,KAAKL,MAAMC,qBAC5BK,SAAU,CAACC,KAAM,WACnB,yBAAKC,IAAM,oLAAoLC,MAAM,WAGrM,kBAAC,oBAAD,CAAmBP,UAAU,MAAMC,MAAO,CAACC,QAASC,KAAKL,MAAMC,sBAC/D,yBAAKO,IAAM,4JAA4JC,MAAM,QAC7KH,SAAU,CAACC,KAAM,YAGjB,kBAAC,aAAD,CACEG,GAAG,YACHR,UAAU,MACVS,MAAO,SAASC,GAAGC,MAAM,oCAEvB,yBAAKL,IAAM,wEACXC,MAAM,WAGV,kBAAC,aAAD,CACAP,UAAY,MACZQ,GAAG,WACHC,MAAO,WAAWE,MAAM,oCAAqCC,OAAOC,SAASC,KAAK,iCAElF,yBAAKR,IAAI,wEACTC,MAAM,gB,GApCIQ,IAAMnB,WCMJoB,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c9c20776.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './App.css';\n\nexport default class ToDoDragDropDemo extends Component {\n  state = {\n\ttasks: [\n      {id: \"1\", taskName:\"Read book\",type:\"inProgress\", backgroundColor: \"red\"},\n      {id: \"2\", taskName:\"Pay bills\", type:\"inProgress\", backgroundColor:\"green\"},\n      {id: \"3\", taskName:\"Go to the gym\", type:\"Done\", backgroundColor:\"blue\"},\n      {id: \"4\", taskName:\"Play baseball\", type:\"Done\", backgroundColor:\"green\"}\n\t]\n}\n\n\tonDragStart = (event, taskName) => {\n    \tconsole.log('dragstart on div: ', taskName);\n    \tevent.dataTransfer.setData(\"taskName\", taskName);\n\t}\n\tonDragOver = (event) => {\n\t    event.preventDefault();\n\t}\n\n\tonDrop = (event, cat) => {\n\t    let taskName = event.dataTransfer.getData(\"taskName\");\n\n\t    let tasks = this.state.tasks.filter((task) => {\n\t        if (task.taskName === taskName) {\n\t            task.type = cat;\n\t        }\n\t        return task;\n\t    });\n\n\t    this.setState({\n\t        ...this.state,\n\t        tasks\n\t    });\n\t}\n\trender() {\n\t\tvar tasks = {\n\t      inProgress: [],\n\t      Done: []\n\t    }\n\n\t\tthis.state.tasks.forEach ((task) => {\n\t\t  tasks[task.type].push(\n\t\t    <div key={task.id} \n\t\t      onDragStart = {(event) => this.onDragStart(event, task.taskName)}\n\t\t      draggable\n\t\t      className=\"draggable\"\n\t\t      style = {{backgroundColor: task.bgcolor}}>\n\t\t      {task.taskName}\n\t\t    </div>\n\t\t  );\n\t\t});\n\n\t    return (\n\t      <div className=\"drag-container\">\n\t        <h2 className=\"head\">To Do List Drag & Drop</h2>\n\t\t    <div className=\"inProgress\"\n          onDragOver={(event)=>this.onDragOver(event)}\n          onDrop={(event)=>{this.onDrop(event, \"inProgress\")}}>\n            <span className=\"group-header\">In Progress</span>\n            {tasks.inProgress}\n        </div>\n\t        <div className=\"droppable\"\n\t        \tonDragOver={(event)=>this.onDragOver(event)}\n          \t\tonDrop={(event)=>this.onDrop(event, \"Done\")}>\n\t          <span className=\"group-header\">Done</span>\n\t          {tasks.Done}\n\t        </div>\t        \n\t      </div>\n\t    );\n  \t}\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ToDoDragDropDemo from './Draggable.js'\nimport { DragDropContainer, DropTarget } from 'react-drag-drop-container';\n\nclass App extends React.Component {\n  state = {\n    draggableVisibility: \"block\"\n  }\n\n  render(){\n    return (\n      <>\n      <h1> Put the orange in the box and the apple in the basket </h1>\n        <DragDropContainer \n          targetKey=\"foo\" \n          style={{display: this.state.draggableVisibility}}\n          dropData={{type: \"Orange\"}}>\n        <img src = \"https://media.istockphoto.com/photos/orange-fruit-isolated-on-a-white-background-picture-id494037460?k=6&m=494037460&s=612x612&w=0&h=9CJ0RvlNLk3BMJ4ud2JmyQR7t_fUY7bLw8wl4Tk__kY=\" width=\"100px\" />\n        </DragDropContainer>\n\n        <DragDropContainer targetKey=\"bar\" style={{display: this.state.draggableVisibility}}>\n        <img src = \"https://media.istockphoto.com/photos/bite-on-a-red-apple-picture-id475190475?k=6&m=475190475&s=612x612&w=0&h=9yexhsRfQ5-f-CKOMkkZiebbgOJuUq9wsbEfmeUmqGw=\" width=\"100px\" \n        dropData={{type: \"Apple\"}}/>\n        </DragDropContainer>\n\n        <DropTarget \n          id=\"my_target\"\n          targetKey=\"foo\"\n          onHit={function(e){alert(\"You put the orange in the box!\");}}\n        >\n            <img src = \"https://th.bing.com/th/id/OIP.IUAOYq2W5nhHlOLltRdP9gHaHa?pid=Api&rs=1\"\n            width=\"200px\"/>\n        </DropTarget>\n\n        <DropTarget\n        targetKey = \"bar\"\n        id=\"a_target\"\n        onHit={function(){alert(\"You put the apple in the basket!\"); window.location.href=\"https://youtu.be/dQw4w9WgXcQ\";}}\n        >\n        <img src=\"https://th.bing.com/th/id/OIP.aOwDwxpozqlZi9Ur0EjkXwHaHa?pid=Api&rs=1\"\n        width=\"200px\"/>\n        </DropTarget>\n      </>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}